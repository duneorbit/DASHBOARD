<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">
		
	<!-- 
		SECURITY NOTES:
		User Profiles are stored in mongo db
		For Fun access control is stored in open LDAP
		Security orchestration is down via mulesoft ESB
		
		sec:intercept-url access attribute is spring wired to AuthorizationController to find the roles required for the request mapping
		
		At Code level AuthorizationController is used to securely execute blocks of code that requires further access control checks, essentially CRUD 
		credentials stored in Subject
		
		If a uer cannot login, a registration is made in mongo db but the profile is not made active,
		and email is sent to further proceed with registration
		email completion link completes registration where profile is updated with default ROLE. 
		Default credential entries are made in LDAP for access control for the application.
		These need to be manually overidden in LDAP to grant for example, write, delete, update for the user profile account.
		
		login security implementation iimplementation includes three strike lockout, remember me.
	 -->

	<sec:http auto-config="true" use-expressions="true">
		<sec:intercept-url pattern="/controller/**" access="hasRole('CUSTOMER') or hasRole('ADMIN')" />
		
		<sec:form-login login-processing-url="/j_spring_security_check" login-page="/login.jsp" authentication-failure-url="/login.jsp?error=1" />
		<sec:logout logout-success-url="/login.jsp" logout-url="/j_spring_security_logout" />
	</sec:http>

	<sec:authentication-manager erase-credentials="false">
		<sec:authentication-provider ref="jaasAuthProvider" />
	</sec:authentication-manager>

	<bean id="jaasAuthProvider" class="org.springframework.security.authentication.jaas.DefaultJaasAuthenticationProvider">
		<property name="configuration">
			<bean
				class="org.springframework.security.authentication.jaas.memory.InMemoryConfiguration">
				<constructor-arg>
					<map>
						<entry key="SPRINGSECURITY">
							<array>
								<bean class="javax.security.auth.login.AppConfigurationEntry">
									<constructor-arg value="com.jspeedbox.security.jass.Login" />
									<constructor-arg>
										<util:constant
											static-field="javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag.REQUIRED" />
									</constructor-arg>
									<constructor-arg>
										<map></map>
									</constructor-arg>
								</bean>
							</array>
						</entry>
					</map>
				</constructor-arg>
			</bean>
		</property>
		<property name="authorityGranters">
			<list>
				<bean class="com.jspeedbox.security.jass.auth.RoleGranter" />
			</list>
		</property>
	</bean>
</beans>
